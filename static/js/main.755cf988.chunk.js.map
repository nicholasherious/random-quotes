{"version":3,"sources":["api/quotesApi.js","containers/Main.js","styles/Css.js","App.js","serviceWorker.js","index.js"],"names":["quotesApi","a","axios","get","then","data","result","quoteNum","Math","floor","random","length","singleQuote","console","log","Main","useState","quotes","setQuotes","useEffect","className","text","title","author","class","type","onClick","styled","h1","Wrapper","section","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"sRAIaA,EAAS,uCAAG,gCAAAC,EAAA,sEACFC,IAAMC,IAHX,+BAG0BC,MAAK,qBAAGC,QAD3B,cACjBC,EADiB,OAEjBC,EAAWC,KAAKC,MAAMD,KAAKE,SAAWJ,EAAOK,QAC7CC,EAAcN,EAAOC,GAC3BM,QAAQC,IAAIR,EAAOC,GAAW,aAJP,kBAMhBK,GANgB,2CAAH,qDCATG,EAAO,WAAO,IAAD,EACIC,mBAAS,IADb,mBACjBC,EADiB,KACTC,EADS,OAEIF,mBAAS,IAFb,6BAYxB,OARAG,qBAAU,WACRnB,IAAYI,MAAK,SAAAC,GAAI,OAAIa,EAAUb,QAClC,IAOD,6BACE,yBAAKe,UAAU,oCACb,yBAAKA,UAAU,iBACb,yBAAKA,UAAU,eAAf,SACA,yBAAKA,UAAU,cACb,gCAAYA,UAAU,mBACnBH,EAAOI,KACR,4BAAQD,UAAU,qBAChB,0BAAME,MAAM,gBAAgBL,EAAOM,YAK3C,yBAAKH,UAAU,0BACb,yBAAKI,MAAM,gBACT,yBAAKJ,UAAU,eACb,yBAAKA,UAAU,OACb,4BACEK,KAAK,SACLL,UAAU,yBACVM,QAzBhB,WACE1B,IAAYI,MAAK,SAAAC,GAAI,OAAIa,EAAUb,QAqBvB,iB,2QChCKsB,IAAOC,GAAV,KAAX,IAMMC,EAAUF,IAAOG,QAAV,KCOLC,MATf,WACE,OACE,kBAACF,EAAD,KACA,kBAAC,EAAD,QCGgBG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxC,MAAK,SAAAyC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLnC,QAAQmC,MAAMA,EAAMC,c","file":"static/js/main.755cf988.chunk.js","sourcesContent":["import axios from \"axios\";\n\nconst quotesUrl = \"https://type.fit/api/quotes\";\n\nexport const quotesApi = async () => {\n  const result = await axios.get(quotesUrl).then(({ data }) => data);\n  const quoteNum = Math.floor(Math.random() * result.length);\n  const singleQuote = result[quoteNum];\n  console.log(result[quoteNum], \"quotesApi\");\n\n  return singleQuote;\n};\n","import React, { useState, useEffect } from \"react\";\nimport { quotesApi } from \"../api/quotesApi\";\nimport { QuoteCard } from \"../QuoteCard\";\n\nexport const Main = () => {\n  const [quotes, setQuotes] = useState([]);\n  const [random, setRandom] = useState([]);\n\n  useEffect(() => {\n    quotesApi().then(data => setQuotes(data));\n  }, []);\n\n  function handleClick() {\n    quotesApi().then(data => setQuotes(data));\n  }\n\n  return (\n    <div>\n      <div className=\"shadow p-3 mb-5 bg-white rounded\">\n        <div className=\"card mx-auto \">\n          <div className=\"card-header\">Quote</div>\n          <div className=\"card-body \">\n            <blockquote className=\"blockquote mb-0\">\n              {quotes.text}\n              <footer className=\"blockquote-footer\">\n                <cite title=\"Source Title\">{quotes.author}</cite>\n              </footer>\n            </blockquote>\n          </div>\n        </div>\n        <div className=\"container mx-auto mt-3\">\n          <div class=\"row mx-md-n5\">\n            <div className=\"col px-md-5\">\n              <div className=\"p-3\">\n                <button\n                  type=\"button\"\n                  className=\"btn btn-primary btn-lg\"\n                  onClick={handleClick}\n                >\n                  Random\n                </button>\n              </div>\n            </div>\n         \n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n","import styled from 'styled-components'\n\nexport const Title = styled.h1`\n  font-size: 1.5em;\n  text-align: center;\n  color: palevioletred;\n`;\n\nexport const Wrapper = styled.section`\n  padding: 10em;\n  background: #F0F8FF;\n`;\n","import React from 'react';\nimport { Main } from './containers/Main'\n\nimport { Wrapper } from './styles/Css';\n\n\nfunction App() {\n  return (\n    <Wrapper>\n    <Main />\n    </Wrapper>\n    \n  );\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import 'bootstrap/dist/css/bootstrap.min.css';\nimport './styles.css'\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\nserviceWorker.unregister();\n"],"sourceRoot":""}